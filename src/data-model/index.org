#+TITLE: Data Model of the User Directory Application
#+AUTHOR: VLEAD
#+DATE: [2016-05-11 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export


* Abstract Entity Types

** User
** Email
** Name
** Role 
** Session

* Relations with cardinality constraints over entity types 
For each relation, we define its inverse next to it.
#+begin_src spec :tangle spec.txt
[email, user]  :  User?    > Email!
[name, user]   :  User     > Name!
[role, user]   :  User     > Role
[user, session]:  Session? > User!
[role, session]:  Session  > Role!
#+end_src

* Disjoint Unions

#+begin_src spec :tangle spec.txt
Role = guest + user + admin + owner
#+end_src
* System state

  The system's state is captured by a set of /state
  variables/.  



** Entity sets

 #+begin_src spec :tangle spec.txt
 *users*    : set[User]   set of users in the system.
 *emails*   : set[Email]  set of emails in the system.
 *names*    : set[Name]   set of names in the system.
 *roles*    : set[Role]   set of roles of all users.
 *sessions* : set[Session] set of sessions in the system.
 #+end_src



** Relations 

These specifications also capture referential integrity.

#+begin_src spec :tangle spec.txt
[email, user]   :  users-set      > emails-set
[name, user]    :  users-set      > names-set
[role, user]    :  users-set      > roles-set
[user, session] :  sessions-set?  > users-set
[role, session] :  sessions-set   > roles-set
#+end_src

* Other constraints



** Entities in the System
  The system is composed of User, Email, Name, Role
  and a Session entities.

** Relationships between the entities in the system

*** Symbol Definitions

    1. ! denotes exactly one
    2. ? denotes at most one (zero or one)
    3. + denotes at least one (one or more)
    4. > denotes a relationship
    5. [a,b] denotes both a is inverse of b
   
*** Entity Relationships

    1. [email, user] : User? > Email! :: implies 
       - email is a relation with domain as User and co-domain of exactly one
         email.  (email : User > Email!)
       - user is a relation with domain as Email and co-domain of atmost one
         User. (user: Email > User?)
       - user is inverse of email
  
*** Realization of the system  
    
#+BEGIN_SRC python :tangle src/entities.py :eval no
class User:
    
    def __init__(email, name):
        pass
#+END_SRC

#+BEGIN_SRC python :tangle src/entities.py :eval no
class Email:
    def __init__():
        pass
#+END_SRC

#+BEGIN_SRC python :tangle src/entities.py :eval no
class Name:
    def __init__():
        pass
#+END_SRC

#+BEGIN_SRC python :tangle src/entities.py :eval no
class Role:
    def __init__():
        pass
#+END_SRC

#+BEGIN_SRC python :tangle src/entities.py :eval no
class Session:
    def __init__():
        pass
#+END_SRC


* State of the system
  The state of the system is comprised of sets of *users*, *emails*, *names*,
  *roles* and *sessions*.
  
  
  

     


         
     

  
